/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * beating.games
 * Swagger documentation
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  GetLoggedInUserStatusDto,
  PublicUserResponseDto
} from '.././dto'

export const getGetProfileMock = (overrideResponse: any = {}): PublicUserResponseDto => ({avatar: faker.word.sample(), background: faker.word.sample(), email: faker.word.sample(), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), username: faker.word.sample(), ...overrideResponse})

export const getGetLoginStatusMock = (overrideResponse: any = {}): GetLoggedInUserStatusDto => ({isLoggedIn: faker.datatype.boolean(), userId: faker.number.int({min: undefined, max: undefined}), username: faker.word.sample(), ...overrideResponse})


export const getGetProfileMockHandler = (overrideResponse?: PublicUserResponseDto) => {
  return http.get('*/api/user/:username', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getGetProfileMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getSignupUserMockHandler = () => {
  return http.post('*/api/user', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateUserSettingsMockHandler = () => {
  return http.put('*/api/user', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetLoginStatusMockHandler = (overrideResponse?: GetLoggedInUserStatusDto) => {
  return http.get('*/api/user', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getGetLoginStatusMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getUserMock = () => [
  getGetProfileMockHandler(),
  getSignupUserMockHandler(),
  getUpdateUserSettingsMockHandler(),
  getGetLoginStatusMockHandler()
]
