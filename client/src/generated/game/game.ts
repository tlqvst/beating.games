/**
 * Generated by orval v6.24.0 üç∫
 * Do not edit manually.
 * beating.games
 * Swagger documentation
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetGamesParams,
  ListGamesResponseDto,
  UpsertGameRequestDto
} from '.././dto'
import { orvalInstance } from '../../lib/axios/orvalInstance';
import { formDataTransformer } from '../../lib/orval/formDataTransformer';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get list of games for a user
 */
export const getGames = (
    username: string,
    params?: GetGamesParams,
 options?: SecondParameter<typeof orvalInstance>,signal?: AbortSignal
) => {
      
      
      return orvalInstance<ListGamesResponseDto>(
      {url: `/api/game/${username}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetGamesQueryKey = (username: string,
    params?: GetGamesParams,) => {
    return [`/api/game/${username}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetGamesQueryOptions = <TData = Awaited<ReturnType<typeof getGames>>, TError = unknown>(username: string,
    params?: GetGamesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGames>>, TError, TData>>, request?: SecondParameter<typeof orvalInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGamesQueryKey(username,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGames>>> = ({ signal }) => getGames(username,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(username), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getGames>>, TError, TData> & { queryKey: QueryKey }
}

export type GetGamesQueryResult = NonNullable<Awaited<ReturnType<typeof getGames>>>
export type GetGamesQueryError = unknown

/**
 * @summary Get list of games for a user
 */
export const useGetGames = <TData = Awaited<ReturnType<typeof getGames>>, TError = unknown>(
 username: string,
    params?: GetGamesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGames>>, TError, TData>>, request?: SecondParameter<typeof orvalInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetGamesQueryOptions(username,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new game
 */
export const createGame = (
    upsertGameRequestDto: UpsertGameRequestDto,
 options?: SecondParameter<typeof orvalInstance>,) => {
      
      const formData = formDataTransformer(upsertGameRequestDto)
      return orvalInstance<void>(
      {url: `/api/game`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  


export const getCreateGameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createGame>>, TError,{data: UpsertGameRequestDto}, TContext>, request?: SecondParameter<typeof orvalInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createGame>>, TError,{data: UpsertGameRequestDto}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createGame>>, {data: UpsertGameRequestDto}> = (props) => {
          const {data} = props ?? {};

          return  createGame(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CreateGameMutationResult = NonNullable<Awaited<ReturnType<typeof createGame>>>
    export type CreateGameMutationBody = UpsertGameRequestDto
    export type CreateGameMutationError = unknown

    /**
 * @summary Create a new game
 */
export const useCreateGame = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createGame>>, TError,{data: UpsertGameRequestDto}, TContext>, request?: SecondParameter<typeof orvalInstance>}
) => {

      const mutationOptions = getCreateGameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Update a game
 */
export const updateGame = (
    id: string,
    upsertGameRequestDto: UpsertGameRequestDto,
 options?: SecondParameter<typeof orvalInstance>,) => {
      
      const formData = formDataTransformer(upsertGameRequestDto)
      return orvalInstance<void>(
      {url: `/api/game/${id}`, method: 'PUT',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  


export const getUpdateGameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateGame>>, TError,{id: string;data: UpsertGameRequestDto}, TContext>, request?: SecondParameter<typeof orvalInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateGame>>, TError,{id: string;data: UpsertGameRequestDto}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateGame>>, {id: string;data: UpsertGameRequestDto}> = (props) => {
          const {id,data} = props ?? {};

          return  updateGame(id,data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type UpdateGameMutationResult = NonNullable<Awaited<ReturnType<typeof updateGame>>>
    export type UpdateGameMutationBody = UpsertGameRequestDto
    export type UpdateGameMutationError = unknown

    /**
 * @summary Update a game
 */
export const useUpdateGame = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateGame>>, TError,{id: string;data: UpsertGameRequestDto}, TContext>, request?: SecondParameter<typeof orvalInstance>}
) => {

      const mutationOptions = getUpdateGameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete a game
 */
export const deleteGame = (
    id: number,
 options?: SecondParameter<typeof orvalInstance>,) => {
      
      
      return orvalInstance<void>(
      {url: `/api/game/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteGameMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteGame>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof orvalInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteGame>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteGame>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteGame(id,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteGameMutationResult = NonNullable<Awaited<ReturnType<typeof deleteGame>>>
    
    export type DeleteGameMutationError = unknown

    /**
 * @summary Delete a game
 */
export const useDeleteGame = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteGame>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof orvalInstance>}
) => {

      const mutationOptions = getDeleteGameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    