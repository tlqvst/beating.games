/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * beating.games
 * Swagger documentation
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  ListGamesResponseDto
} from '.././dto'

export const getGetGamesMock = (overrideResponse: any = {}): ListGamesResponseDto => ({beaten: faker.number.int({min: undefined, max: undefined}), continual: faker.number.int({min: undefined, max: undefined}), dropped: faker.number.int({min: undefined, max: undefined}), games: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({achievementsLink: faker.word.sample(), addedOn: `${faker.date.past().toISOString().split('.')[0]}Z`, background: faker.word.sample(), content: faker.word.sample(), date: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), owned: faker.datatype.boolean(), perfectGame: faker.datatype.boolean(), playtime: faker.number.int({min: undefined, max: undefined}), status: faker.word.sample(), system: faker.word.sample(), title: faker.word.sample(), userId: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})), inProgress: faker.number.int({min: undefined, max: undefined}), take: faker.number.int({min: undefined, max: undefined}), total: faker.number.int({min: undefined, max: undefined}), wantToPlay: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})


export const getGetGamesMockHandler = (overrideResponse?: ListGamesResponseDto) => {
  return http.get('*/api/game/:username', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getGetGamesMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getCreateGameMockHandler = () => {
  return http.post('*/api/game', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateGameMockHandler = () => {
  return http.put('*/api/game/:id', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeleteGameMockHandler = () => {
  return http.delete('*/api/game/:id', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getExportGamesCsvMockHandler = () => {
  return http.post('*/api/game/export', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getGameMock = () => [
  getGetGamesMockHandler(),
  getCreateGameMockHandler(),
  getUpdateGameMockHandler(),
  getDeleteGameMockHandler(),
  getExportGamesCsvMockHandler()
]
